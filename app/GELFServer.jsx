import React from 'react';
import {Col, Row} from 'react-bootstrap';
import { ResultTable, SearchSidebar } from 'components/search';

import Immutable from 'immutable';
import 'stylesheets/bootstrap.min.css'
import 'stylesheets/font-awesome.min.css'
import 'stylesheets/graylog2.less'

const GELFServer = React.createClass({
    getInitialState: function () {
        return {
            messages: [
                {
                    id: 1919191,
                    fields: {
                        "short_message": "308776092882232072309356208387867589090960219729457359720626668495123558701535119420190024697288605011122409604189709921314457199588597804862155485552506527490350225309474744740940706261380072113493085121430785791249793505173567478817560658162592897900212946444207707079222153730565535264556559741370360919809955891725071669261926582492244017916149999540316989904632156979914785475523450925564429437619028742289489175292819339024232934688638118705924241688233749445420219201740582761906653578882916693691003019784155921229045314855231887081934305490145152452238047649083916239982533976627983405926981908065382877594213687119036966958486553124639969495891105465591249420199607967011954085169678022064516409074040694313321400797719082733748365628141874288339574159293748565848224919775055707006380683440706090561358276676143505863310359783300423653017672406598682244283442420595932019787936078524270876936185561437967304358891081739673425311525791792705976229786114120596004631533734529427456292017205404862176257781768312220676259081218898213812039769927814150320699395813206449193547845258935174076263027642579936838142831759676420034182988268355146388952787629686088212767072203472280815027958966996085909096855231849853175302097507798592696117794516776925559990030030618100816109658221851712366210494776059408667715204850989155356424677326078412987490796430520580193030957634369662300608496382114283693761238615950996192992804645736360055606993914246457524593083062594770181236344714418142410580383160062010471567607802036865183877249884653457497899924255644153391293082270303654553587685580201409662017605051459590987892665512902823200589646266347162824477839607144366984917682454567886545274577417752941433423990450401253346736809903304846405790539923387298116077564718109272531672963836638843300737137897447197440502249604668897291871247568848853546631217761258695139933145092866708294035350870715104021217963139672280978175564327359828091155724966808086229460402655326290694786574245562877859689086744492516667695431611993040779200642223786011973397596234988385761510469640163117632708253197408958225576620009207054144320166196151071808535870336298601913569840686944920408972228516078813390802924601490645688500131571743939231051102231299060240014655210246767464794576772250352297453031413999843048753229057311194759308233499793370819774129199829540034910777386814353144465379452600216538116843897182083429018244054320553533598274973051944198354724295815728271072643108727214595164165434314005194759748311244714214386341641182403726221784342029043263162389904",
                        "line": 1,
                        "level": 4,
                        "_process_name": "MainProcess",
                        "version": "1.0",
                        "full_message": "308776092882232072309356208387867589090960219729457359720626668495123558701535119420190024697288605011122409604189709921314457199588597804862155485552506527490350225309474744740940706261380072113493085121430785791249793505173567478817560658162592897900212946444207707079222153730565535264556559741370360919809955891725071669261926582492244017916149999540316989904632156979914785475523450925564429437619028742289489175292819339024232934688638118705924241688233749445420219201740582761906653578882916693691003019784155921229045314855231887081934305490145152452238047649083916239982533976627983405926981908065382877594213687119036966958486553124639969495891105465591249420199607967011954085169678022064516409074040694313321400797719082733748365628141874288339574159293748565848224919775055707006380683440706090561358276676143505863310359783300423653017672406598682244283442420595932019787936078524270876936185561437967304358891081739673425311525791792705976229786114120596004631533734529427456292017205404862176257781768312220676259081218898213812039769927814150320699395813206449193547845258935174076263027642579936838142831759676420034182988268355146388952787629686088212767072203472280815027958966996085909096855231849853175302097507798592696117794516776925559990030030618100816109658221851712366210494776059408667715204850989155356424677326078412987490796430520580193030957634369662300608496382114283693761238615950996192992804645736360055606993914246457524593083062594770181236344714418142410580383160062010471567607802036865183877249884653457497899924255644153391293082270303654553587685580201409662017605051459590987892665512902823200589646266347162824477839607144366984917682454567886545274577417752941433423990450401253346736809903304846405790539923387298116077564718109272531672963836638843300737137897447197440502249604668897291871247568848853546631217761258695139933145092866708294035350870715104021217963139672280978175564327359828091155724966808086229460402655326290694786574245562877859689086744492516667695431611993040779200642223786011973397596234988385761510469640163117632708253197408958225576620009207054144320166196151071808535870336298601913569840686944920408972228516078813390802924601490645688500131571743939231051102231299060240014655210246767464794576772250352297453031413999843048753229057311194759308233499793370819774129199829540034910777386814353144465379452600216538116843897182083429018244054320553533598274973051944198354724295815728271072643108727214595164165434314005194759748311244714214386341641182403726221784342029043263162389904",
                        "host": "frohsinn",
                        "_thread_name": "MainThread",
                        "facility": "root",
                        "file": "<ipython-input-82-d8435025cc40>",
                        "timestamp": new Date(1459101313.357755 * 1000),
                        "_function": "<module>",
                        "_pid": 29296
                    }
                }
            ],
            selectedFields: Immutable.OrderedSet(['message', 'host', '_function']),
            sortField: 'timestamp',
            searchConfig: {},
            sortOrder: 'desc',
            showAllFields: true
        };
    },
    _fields() {
        var result = this.state.messages.reduce(
            function (m1, m2) {
                return Immutable.List(
                    Immutable.Set(Object.keys(m1.fields)).union(
                        Immutable.Set(Object.keys(m2.fields))
                    )
                );
            },
            {fields: {}}
        );
        console.log('_fields', result);

        return result.map((name) => ({name: name, hash: name}));
    },
    sortFields(fieldSet) {
      let newFieldSet = fieldSet;
      let sortedFields = Immutable.OrderedSet();

      if (newFieldSet.contains('source')) {
        sortedFields = sortedFields.add('source');
      }
      newFieldSet = newFieldSet.delete('source');
      const remainingFieldsSorted = newFieldSet.sort((field1, field2) => field1.toLowerCase().localeCompare(field2.toLowerCase()));
      return sortedFields.concat(remainingFieldsSorted);
    },
    updateSelectedFields(fieldSelection) {
      const selectedFields = this.sortFields(fieldSelection);
      this.setState({selectedFields: selectedFields});
    },
    onFieldToggled(fieldName) {
        console.log('toggled', fieldName);
        const currentFields = this.state.selectedFields;
        let newFieldSet;
        if (currentFields.contains(fieldName)) {
            newFieldSet = currentFields.delete(fieldName);
        } else {
            newFieldSet = currentFields.add(fieldName);
        }
        this.updateSelectedFields(newFieldSet);
    },

    render: function () {
        return (
                <Row id="main-content-search">
                    <Col md={3} sm={12} id="sidebar">
                        <SearchSidebar result={this.state.messages}
                                       builtQuery={""}
                                       selectedFields={this.state.selectedFields}
                                       fields={this._fields()}
                                       fieldAnalyzers={[]}
                                       showAllFields={this.state.showAllFields}
                                       togglePageFields={() => {}}
                                       onFieldToggled={this.onFieldToggled}
                                       onFieldAnalyzer={() => {}}
                                       predefinedFieldSelection={() => {}}
                                       showHighlightToggle={false}
                                       shouldHighlight={false}
                                       toggleShouldHighlight={false}
                                       currentSavedSearch={""}
                                       searchInStream={false}
                                       permissions={[]}
                        />
                    </Col>
                    <Col md={9} sm={12} id="main-content-sidebar">
                        <ResultTable messages={this.state.messages}
                                     selectedFields={this.state.selectedFields}
                                     sortField={this.state.sortField}
                                     sortOrder={this.state.sortOrder}
                                     nodes={{}}
                                     highlight={false}
                                     searchConfig={this.state.searchConfig}
                        />
                    </Col>
                </Row>
        );
    }
});

export default GELFServer;
